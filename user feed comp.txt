<template>
  <div class="app-container">
    <!-- Top Navigation Bar -->
    <nav class="top-nav">
      <div class="nav-brand">
        <div class="brand-logo">
          <svg width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM8.5 8C9.33 8 10 8.67 10 9.5S9.33 11 8.5 11 7 10.33 7 9.5 7.67 8 8.5 8zm7 0c.83 0 1.5.67 1.5 1.5S16.33 11 15.5 11 14 10.33 14 9.5 14.67 8 15.5 8zM12 17.5c-2.33 0-4.31-1.46-5.11-3.5h10.22c-.8 2.04-2.78 3.5-5.11 3.5z"/>
          </svg>
        </div>
        <span class="brand-name">SafeSpace</span>
      </div>
      
      <div class="nav-actions">
        <div class="user-info">
          <div class="user-avatar">
            {{ user.username.charAt(0).toUpperCase() }}
          </div>
          <span class="user-name">{{ user.username }}</span>
        </div>
        <button @click="showLogoutModal = true" class="logout-btn">
          <svg width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
            <path fill-rule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
          </svg>
        </button>
      </div>
    </nav>

    <!-- Main Content Layout -->
    <div class="main-layout">
      <!-- Left Sidebar -->
      <aside class="sidebar">
        <nav class="sidebar-nav">
          <div 
            class="nav-item" 
            :class="{ active: activeTab === 'myProfile' }" 
            @click="activeTab = 'myProfile'"
          >
            <svg width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
              <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
            </svg>
            <span>My Profile</span>
          </div>
          <div 
            class="nav-item" 
            :class="{ active: activeTab === 'exploreFeed' }" 
            @click="activeTab = 'exploreFeed'"
          >
            <svg width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
              <path d="M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v8A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-8A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1h-3zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5z"/>
            </svg>
            <span>Explore Feed</span>
          </div>
        </nav>
      </aside>

      <!-- Main Content Area -->
      <main class="content-area">
        <!-- My Profile Tab -->
        <div v-if="activeTab === 'myProfile'" class="feed-section">
          <div class="section-header">
            <div class="header-content">
              <h1 class="section-title">My Posts</h1>
              <p class="section-subtitle">Manage your content and engage with your community</p>
            </div>
            <button @click="showCreatePostModal = true" class="create-btn">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
              </svg>
              New Post
            </button>
          </div>
          
          <div v-if="loadingMyPosts" class="loading-state">
            <div class="loading-spinner"></div>
            <p>Loading your posts...</p>
          </div>
          
          <div class="posts-feed">
            <article v-for="post in myPosts" :key="post.id" class="post-card">
              <div class="post-header">
                <div class="author-info">
                  <div class="author-avatar">
                    {{ user.username.charAt(0).toUpperCase() }}
                  </div>
                  <div class="author-details">
                    <span class="author-name">{{ user.username }}</span>
                    <span class="post-time">{{ formatDate(post.created_at) }}</span>
                  </div>
                </div>
              </div>
              
              <div class="post-content">
                <p>{{ post.content }}</p>
              </div>
              
              <div class="post-footer">
                <div class="post-stats">
                  <span class="stat-item">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z"/>
                    </svg>
                    {{ post.total_comments }} comments
                  </span>
                </div>
                <div class="post-actions">
                  <button @click="viewComments(post, 'my')" class="action-btn secondary">
                    View Comments
                  </button>
                </div>
              </div>
            </article>
            
            <div v-if="myPosts.length === 0 && !loadingMyPosts" class="empty-state">
              <div class="empty-icon">
                <svg width="48" height="48" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
                </svg>
              </div>
              <h3>No posts yet</h3>
              <p>Share your thoughts and connect with the community</p>
              <button @click="showCreatePostModal = true" class="create-btn">
                Create Your First Post
              </button>
            </div>
          </div>
        </div>

        <!-- Explore Feed Tab -->
        <div v-if="activeTab === 'exploreFeed'" class="feed-section">
          <div class="section-header">
            <div class="header-content">
              <h1 class="section-title">Explore Feed</h1>
              <p class="section-subtitle">Discover and engage with community content</p>
            </div>
          </div>
          
          <div v-if="loadingExploreFeed" class="loading-state">
            <div class="loading-spinner"></div>
            <p>Loading posts...</p>
          </div>
          
          <div class="posts-feed">
            <article v-for="post in explorePosts" :key="post.id" class="post-card">
              <div class="post-header">
                <div class="author-info">
                  <div class="author-avatar">
                    {{ post.author_username.charAt(0).toUpperCase() }}
                  </div>
                  <div class="author-details">
                    <span class="author-name">{{ post.author_username }}</span>
                    <span class="post-time">{{ formatDate(post.created_at) }}</span>
                  </div>
                </div>
              </div>
              
              <div class="post-content">
                <p>{{ post.content }}</p>
              </div>
              
              <div class="post-footer">
                <div class="post-stats">
                  <span class="stat-item">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z"/>
                    </svg>
                    {{ post.total_comments }} comments
                  </span>
                </div>
                <div class="post-actions">
                  <button @click="viewComments(post, 'explore')" class="action-btn secondary">
                    View Comments
                  </button>
                  <button @click="postComment(post)" class="action-btn primary">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z"/>
                    </svg>
                    Comment
                  </button>
                </div>
              </div>
            </article>
            
            <div v-if="explorePosts.length === 0 && !loadingExploreFeed" class="empty-state">
              <div class="empty-icon">
                <svg width="48" height="48" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                </svg>
              </div>
              <h3>No posts to explore</h3>
              <p>Check back later for new content from the community</p>
            </div>
          </div>
        </div>
      </main>
    </div>

    <!-- Create Post Modal -->
    <div v-if="showCreatePostModal" class="modal-overlay" @click="showCreatePostModal = false">
      <div class="modal modern-modal" @click.stop>
        <div class="modal-header">
          <h2>Create New Post</h2>
          <button @click="cancelCreatePost" class="close-btn">
            <svg width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
              <path d="M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z"/>
            </svg>
          </button>
        </div>
        
        <div class="modal-body">
          <div class="compose-area">
            <div class="author-info">
              <div class="author-avatar">
                {{ user.username.charAt(0).toUpperCase() }}
              </div>
              <span class="author-name">{{ user.username }}</span>
            </div>
            <textarea 
              v-model="newPost.content" 
              placeholder="What's on your mind?" 
              class="post-textarea"
              rows="4"
            ></textarea>
          </div>
        </div>
        
        <div class="modal-footer">
          <div class="character-count" :class="{ warning: newPost.content.length > 1800 }">
            {{ newPost.content.length }}/2000
          </div>
          <div class="modal-actions">
            <button @click="cancelCreatePost" class="btn-cancel">Cancel</button>
            <button 
              @click="createPost" 
              class="btn-primary" 
              :disabled="creatingPost || !newPost.content.trim() || newPost.content.length > 2000"
            >
              <span v-if="creatingPost" class="spinner"></span>
              {{ creatingPost ? 'Publishing...' : 'Publish Post' }}
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Comments Modal -->
    <div v-if="showCommentModal" class="modal-overlay" @click="closeCommentsModal">
      <div class="modal large-modal" @click.stop>
        <div class="modal-header">
          <h2>Comments</h2>
          <button @click="closeCommentsModal" class="close-btn">
            <svg width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
              <path d="M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z"/>
            </svg>
          </button>
        </div>
        
        <div class="modal-body">
          <div class="original-post">
            <div class="post-header">
              <div class="author-info">
                <div class="author-avatar">
                  {{ (selectedPost.author_username || user.username).charAt(0).toUpperCase() }}
                </div>
                <div class="author-details">
                  <span class="author-name">{{ selectedPost.author_username || user.username }}</span>
                </div>
              </div>
            </div>
            <div class="post-content">
              <p>{{ selectedPost.content }}</p>
            </div>
          </div>
          
          <div class="comments-section">
            <h3>Comments</h3>
            <div class="comments-list">
              <div v-if="selectedPost.comments && selectedPost.comments.length > 0">
                <div v-for="comment in selectedPost.comments" :key="comment.id" class="comment-item">
                  <div class="comment-header">
                    <div class="comment-author-avatar">
                      {{ comment.author_username.charAt(0).toUpperCase() }}
                    </div>
                    <div class="comment-details">
                      <span class="comment-author">{{ comment.author_username }}</span>
                      <span class="comment-time">{{ formatDate(comment.created_at) }}</span>
                    </div>
                  </div>
                  <div class="comment-content">
                    <p>{{ comment.text }}</p>
                  </div>
                </div>
              </div>
              <div v-else class="empty-comments">
                <svg width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894z"/>
                </svg>
                <p>No comments yet. Be the first to comment!</p>
              </div>
            </div>
            
            <!-- Add Comment Section -->
            <div v-if="commentMode === 'explore'" class="add-comment">
              <h4>Add a comment</h4>
              <div class="comment-compose">
                <div class="comment-author-avatar">
                  {{ user.username.charAt(0).toUpperCase() }}
                </div>
                <textarea 
                  v-model="newComment" 
                  placeholder="Write a comment..." 
                  class="comment-textarea"
                  rows="3"
                ></textarea>
              </div>
              <div class="comment-actions">
                <div class="character-count" :class="{ warning: newComment.length > 900 }">
                  {{ newComment.length }}/1000
                </div>
                <button 
                  @click="submitComment" 
                  class="btn-primary" 
                  :disabled="submittingComment || !newComment.trim() || newComment.length > 1000"
                >
                  <span v-if="submittingComment" class="spinner"></span>
                  {{ submittingComment ? 'Posting...' : 'Post Comment' }}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Logout Modal -->
    <div v-if="showLogoutModal" class="modal-overlay" @click="showLogoutModal = false">
      <div class="modal confirmation-modal" @click.stop>
        <div class="modal-header">
          <h2>Sign Out</h2>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to sign out of your account?</p>
        </div>
        <div class="modal-footer">
          <div class="modal-actions">
            <button @click="showLogoutModal = false" class="btn-cancel">Cancel</button>
            <button @click="confirmLogout" class="btn-danger">Sign Out</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { userAPI } from '@/services/api'

export default {
  name: 'UserFeed',
  data() {
    return {
      user: JSON.parse(localStorage.getItem('user') || '{}'),
      activeTab: 'myProfile',
      showLogoutModal: false,
      showCreatePostModal: false,
      showCommentModal: false,
      selectedPost: {},
      commentMode: 'my',
      newComment: '',
      newPost: {
        content: ''
      },
      myPosts: [],
      explorePosts: [],
      loadingMyPosts: false,
      loadingExploreFeed: false,
      creatingPost: false,
      submittingComment: false
    }
  },
  async mounted() {
    await this.loadMyPosts()
    await this.loadExploreFeed()
  },
  methods: {
    async loadMyPosts() {
      this.loadingMyPosts = true
      try {
        const response = await userAPI.getMyPosts()
        this.myPosts = response.posts || []
      } catch (error) {
        console.error('Error loading my posts:', error)
      } finally {
        this.loadingMyPosts = false
      }
    },

    async loadExploreFeed() {
      this.loadingExploreFeed = true
      try {
        const response = await userAPI.getExploreFeed()
        this.explorePosts = response.posts || []
      } catch (error) {
        console.error('Error loading explore feed:', error)
      } finally {
        this.loadingExploreFeed = false
      }
    },

    async createPost() {
      if (!this.newPost.content.trim()) {
        alert('Please enter some content for your post.')
        return
      }

      this.creatingPost = true
      try {
        await userAPI.createPost({
          content: this.newPost.content
        })
        
        await this.loadMyPosts()
        this.cancelCreatePost()
        
      } catch (error) {
        console.error('Error creating post:', error)
        alert('Failed to create post. Please try again.')
      } finally {
        this.creatingPost = false
      }
    },

    cancelCreatePost() {
      this.newPost.content = ''
      this.showCreatePostModal = false
    },

    viewComments(post, mode) {
      this.selectedPost = post
      this.commentMode = mode
      this.showCommentModal = true
    },

    postComment(post) {
      this.viewComments(post, 'explore')
    },

    async submitComment() {
      if (!this.newComment.trim()) {
        alert('Please enter a comment.')
        return
      }

      this.submittingComment = true
      try {
        const response = await userAPI.createComment({
          text: this.newComment,
          post_id: this.selectedPost.id
        })
        
        if (response.visible_in_feed) {
          alert('Comment posted successfully!')
        } else if (response.auto_processed) {
          alert('Comment found abusive, hence hidden from the user.')
        } else {
          alert('Comment posted will be reviewed by the moderators.')
        }
        
        this.newComment = ''
        await this.loadExploreFeed()
        this.closeCommentsModal()
        
      } catch (error) {
        console.error('Error submitting comment:', error)
        alert('Failed to post comment. Please try again.')
      } finally {
        this.submittingComment = false
      }
    },

    closeCommentsModal() {
      this.showCommentModal = false
      this.selectedPost = {}
      this.newComment = ''
    },

    confirmLogout() {
      localStorage.removeItem('token')
      localStorage.removeItem('user')
      this.$router.push('/login')
    },

    formatDate(date) {
      if (!date) return 'Unknown date'
      const now = new Date()
      const postDate = new Date(date)
      const diffInMs = now - postDate
      const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60))
      const diffInDays = Math.floor(diffInHours / 24)
      
      if (diffInHours < 1) return 'Just now'
      if (diffInHours < 24) return `${diffInHours}h ago`
      if (diffInDays < 7) return `${diffInDays}d ago`
      return postDate.toLocaleDateString()
    }
  }
}
</script>

<style scoped>
* {
  box-sizing: border-box;
}

.app-container {
  min-height: 100vh;
  background: #f8fafc;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
}

/* Top Navigation */
.top-nav {
  background: #fff;
  border-bottom: 1px solid #e5e7eb;
  padding: 1rem 2rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: sticky;
  top: 0;
  z-index: 100;
  backdrop-filter: blur(10px);
}

.nav-brand {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.brand-logo {
  color: #667eea;
}

.brand-name {
  font-size: 1.5rem;
  font-weight: 700;
  color: #1f2937;
  letter-spacing: -0.025em;
}

.nav-actions {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.user-info {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.user-avatar {
  width: 40px;
  height: 40px;
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 1rem;
}

.user-name {
  font-weight: 600;
  color: #374151;
}

.logout-btn {
  background: #f3f4f6;
  border: none;
  padding: 0.5rem;
  border-radius: 8px;
  cursor: pointer;
  color: #6b7280;
  transition: all 0.2s ease;
}

.logout-btn:hover {
  background: #e5e7eb;
  color: #374151;
}

/* Main Layout */
.main-layout {
  display: grid;
  grid-template-columns: 280px 1fr;
  max-width: 1400px;
  margin: 0 auto;
  gap: 2rem;
  padding: 2rem;
}

/* Sidebar */
.sidebar {
  position: sticky;
  top: 100px;
  height: fit-content;
}

.sidebar-nav {
  background: #fff;
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid #e5e7eb;
}

.nav-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 1rem 1.25rem;
  cursor: pointer;
  transition: all 0.2s ease;
  color: #6b7280;
  font-weight: 500;
  border-bottom: 1px solid #f3f4f6;
}

.nav-item:last-child {
  border-bottom: none;
}

.nav-item:hover {
  background: #f9fafb;
  color: #374151;
}

.nav-item.active {
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
}

.nav-item svg {
  flex-shrink: 0;
}

/* Content Area */
.content-area {
  min-height: 600px;
}

.feed-section {
  background: #fff;
  border-radius: 12px;
  border: 1px solid #e5e7eb;
  overflow: hidden;
}

.section-header {
  padding: 2rem 2rem 1rem 2rem;
  border-bottom: 1px solid #f3f4f6;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.header-content h1 {
  font-size: 1.875rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0 0 0.25rem 0;
  letter-spacing: -0.025em;
}

.section-subtitle {
  color: #6b7280;
  margin: 0;
  font-size: 0.95rem;
}

.create-btn {
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 10px;
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  transition: all 0.2s ease;
  font-size: 0.9rem;
}

.create-btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
}

/* Posts Feed */
.posts-feed {
  padding: 1rem 0;
}

.post-card {
  padding: 1.5rem 2rem;
  border-bottom: 1px solid #f3f4f6;
  transition: background-color 0.2s ease;
}

.post-card:hover {
  background: #fafbfc;
}

.post-card:last-child {
  border-bottom: none;
}

.post-header {
  margin-bottom: 1rem;
}

.author-info {
  display: flex;
  align-items: center;
  gap: 